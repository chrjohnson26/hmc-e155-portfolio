[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "E155 Blog",
    "section": "",
    "text": "Hello e155\n\n\nWelcome to my MicroPs blog!\n\n\n\n\n\nAug 26, 2025\n\n\nChristian Johnson\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "E155 Portfolio",
    "section": "",
    "text": "Christian Johnson is in his final year of undergrad at Harvey Mudd studying Computer Science and Mathematics. This past summer Christian worked at Walmart, where he integrated AI into existing workflows by building MCP servers. Some of his favorite classes so far include Network Science, Algorithms, and Machine Learning."
  },
  {
    "objectID": "posts/first-post.html",
    "href": "posts/first-post.html",
    "title": "Hello e155",
    "section": "",
    "text": "This is the first week of the Fall 2025 semester. Iâ€™ve just finished configuring the MicroPs quarto page. Here are a couple goals I have for myself this semester:\n\nGet better with hands on skills like soldering and making clean circuits\nBecome confident with working with new hardware\nProficency in reading data sheets and other documentation"
  },
  {
    "objectID": "labs.html",
    "href": "labs.html",
    "title": "E155 Labs",
    "section": "",
    "text": "In this lab I implemented a design on the FPGA board to demonstrate the functionality of the on-board high-speed oscillator, LEDs, and the 7-segment display. The high speed oscillator was configured and divided down using a counter to achieve a blinking frequency of ~2.4 Hz. Combinational logic was used to control the 7-segment display and other LEDs based on the counter output.\n\n\n\nThe design was implemented using Verilog and tested on the FPGA board. The high-speed oscillator was configured to drive the blinking LED. Combinational logic was used to control the 7-segment display and other LEDs based on the provided truth tables. The design was tested by observing the oscilloscope trace of the blinking LED and checking all input combinations for the 7-segment display output and other LEDs.\n\n\n\nThe source code for my project can be found at this GitHub repository.\n\n\n\n\n\nBlock Diagram for Verilog Design\n\n\nThe block diagram illustrates the overall architecture of the design, including the connections between the FPGA, 7-segment display, and LEDs. The top-level module lab1_CJ is responsible for instantiating and connecting all the sub-modules. The submodules (led_controller and segment) include the logic for controlling the LEDs and the 7-segment display, respectively.\n\n\n\n\n\n\nPhysical Schematic of Circuit\n\n\nThe schematic provides a detailed view of the physical connections between the FPGA, 7-segment display, and LEDs. Each switch has a 100k\\(\\ohm\\) pull-up resistor to ensure a defined logic level when the switch is open. The 7-segment display is connected to the FPGA through 162\\(\\ohm\\) current-limiting resistors to ensure current draw within the recommended range. The surface mount LEDs are connected in series with 1k\\(\\ohm\\) resistors to limit the current to a safe level.\nAccording to the data sheet for the Segment Display, the forward voltage is 2.0V. According to the lab manual the ideal current range is between 5-20mA. This means that the 162\\(\\ohm\\) resistors must ensure that the current through the display remains within this range. Given that the 3.3V supply voltage is used, we can calculate the current through the display as follows:\n\\[\nI = \\frac{V}{R} = \\frac{3.3V - 2.0V}{162 \\ohm} \\approx 8.13mA\n\\]\n\n\n\n\nThis lab meets all intended proficiency specifications. The design was successfully implemented and tested on the FPGA board, demonstrating the functionality of the high-speed oscillator, LEDs, and 7-segment display. The oscilloscope trace confirmed the expected blinking frequency of ~2.4 Hz for the LED, and all input combinations for the 7-segment display were verified against the truth tables. However, the lab does not meet the following excellence specifications:\n\nModelSim simulation (either manually force or automatic testbench) to demonstrate that the design is working properly.\nTestbenches written for each individual module to demonstrate proper operation\nTestbench output included in the report\n\nGiven more time I would complete the test bench I began writing then use ModelSim to simulate the design and verify its functionality.\n\n\n\nThe design successfully demonstrated the functionality of the high-speed oscillator, LEDs, and 7-segment display on the FPGA board. The implementation met all proficiency specifications, and the testing methodology verified the design against the provided requirements by checking all possible input combinations. Unfortunately, I was not able to complete the testbench but intend on doing so in the future. I spent roughly 27 hours on this lab.\n\n\n\n\n\nHere is the System Verilog file Gemini generated:\n/**\n * @brief Blinks an LED at 2 Hz using the internal 48 MHz oscillator.\n * @details This module is designed for a Lattice iCE40 UP5K FPGA.\n *          It instantiates the internal high-speed oscillator (OSCH) to generate a\n *          48 MHz clock. A counter then divides this clock to toggle an LED\n *          output at a frequency of 2 Hz (0.25s on, 0.25s off).\n *\n * @param CLK_FREQ The frequency of the internal oscillator in Hz.\n * @param BLINK_FREQ The desired blink frequency of the LED in Hz.\n */\nmodule led_blinker #(\n    parameter CLK_FREQ   = 48_000_000, // 48 MHz clock frequency\n    parameter BLINK_FREQ = 2           // 2 Hz blink frequency\n) (\n    output logic led_o // LED output\n);\n\n    // The division factor needed to get one toggle every half-period.\n    // (CLK_FREQ / BLINK_FREQ) gives the counts for a full cycle (on and off).\n    // We want to toggle at half the cycle period.\n    localparam HALF_PERIOD_COUNTS = CLK_FREQ / (BLINK_FREQ * 2);\n\n    // Calculate the number of bits required for the counter.\n    // $clog2 calculates the ceiling of log base 2, which gives the bit-width.\n    localparam COUNTER_WIDTH = $clog2(HALF_PERIOD_COUNTS);\n\n    // Internal high-frequency clock signal\n    logic hf_clk;\n\n    // Counter to divide the clock frequency\n    logic [COUNTER_WIDTH-1:0] counter;\n\n    // Instantiate the Lattice iCE40 UltraPlus internal high-speed oscillator.\n    // This generates the main clock for our logic without needing an external crystal.\n    OSCH #(\n        .NOM_FREQ(\"48.00\") // Specify nominal frequency in MHz. Other options: \"12.00\", \"24.00\", \"36.00\"\n    ) u_osc (\n        .STDBY(1'b0),      // Oscillator is not in standby\n        .HFOSCEN(1'b1),    // High Frequency Oscillator is enabled\n        .CHIPCLKEN(1'b1),  // Clock enable for the CHIPCLK-pin\n        .HFOSCOUT(hf_clk)  // High Frequency Oscillator output\n    );\n\n    // Synchronous logic for the counter and LED toggle.\n    // This block is sensitive to the rising edge of the high-frequency clock.\n    always_ff @(posedge hf_clk) begin\n        if (counter == HALF_PERIOD_COUNTS - 1) begin\n            counter &lt;= '0;        // Reset the counter\n            led_o   &lt;= ~led_o;    // Toggle the LED state\n        end else begin\n            counter &lt;= counter + 1; // Increment the counter\n        end\n    end\n\n    // Set the initial state of the LED and counter.\n    initial begin\n        led_o   = 1'b0;\n        counter = '0;\n    end\n\nendmodule"
  },
  {
    "objectID": "labs.html#lab-1---board-assembly-and-testing",
    "href": "labs.html#lab-1---board-assembly-and-testing",
    "title": "E155 Labs",
    "section": "",
    "text": "In this lab I implemented a design on the FPGA board to demonstrate the functionality of the on-board high-speed oscillator, LEDs, and the 7-segment display. The high speed oscillator was configured and divided down using a counter to achieve a blinking frequency of ~2.4 Hz. Combinational logic was used to control the 7-segment display and other LEDs based on the counter output.\n\n\n\nThe design was implemented using Verilog and tested on the FPGA board. The high-speed oscillator was configured to drive the blinking LED. Combinational logic was used to control the 7-segment display and other LEDs based on the provided truth tables. The design was tested by observing the oscilloscope trace of the blinking LED and checking all input combinations for the 7-segment display output and other LEDs.\n\n\n\nThe source code for my project can be found at this GitHub repository.\n\n\n\n\n\nBlock Diagram for Verilog Design\n\n\nThe block diagram illustrates the overall architecture of the design, including the connections between the FPGA, 7-segment display, and LEDs. The top-level module lab1_CJ is responsible for instantiating and connecting all the sub-modules. The submodules (led_controller and segment) include the logic for controlling the LEDs and the 7-segment display, respectively.\n\n\n\n\n\n\nPhysical Schematic of Circuit\n\n\nThe schematic provides a detailed view of the physical connections between the FPGA, 7-segment display, and LEDs. Each switch has a 100k\\(\\ohm\\) pull-up resistor to ensure a defined logic level when the switch is open. The 7-segment display is connected to the FPGA through 162\\(\\ohm\\) current-limiting resistors to ensure current draw within the recommended range. The surface mount LEDs are connected in series with 1k\\(\\ohm\\) resistors to limit the current to a safe level.\nAccording to the data sheet for the Segment Display, the forward voltage is 2.0V. According to the lab manual the ideal current range is between 5-20mA. This means that the 162\\(\\ohm\\) resistors must ensure that the current through the display remains within this range. Given that the 3.3V supply voltage is used, we can calculate the current through the display as follows:\n\\[\nI = \\frac{V}{R} = \\frac{3.3V - 2.0V}{162 \\ohm} \\approx 8.13mA\n\\]\n\n\n\n\nThis lab meets all intended proficiency specifications. The design was successfully implemented and tested on the FPGA board, demonstrating the functionality of the high-speed oscillator, LEDs, and 7-segment display. The oscilloscope trace confirmed the expected blinking frequency of ~2.4 Hz for the LED, and all input combinations for the 7-segment display were verified against the truth tables. However, the lab does not meet the following excellence specifications:\n\nModelSim simulation (either manually force or automatic testbench) to demonstrate that the design is working properly.\nTestbenches written for each individual module to demonstrate proper operation\nTestbench output included in the report\n\nGiven more time I would complete the test bench I began writing then use ModelSim to simulate the design and verify its functionality.\n\n\n\nThe design successfully demonstrated the functionality of the high-speed oscillator, LEDs, and 7-segment display on the FPGA board. The implementation met all proficiency specifications, and the testing methodology verified the design against the provided requirements by checking all possible input combinations. Unfortunately, I was not able to complete the testbench but intend on doing so in the future. I spent roughly 27 hours on this lab.\n\n\n\n\n\nHere is the System Verilog file Gemini generated:\n/**\n * @brief Blinks an LED at 2 Hz using the internal 48 MHz oscillator.\n * @details This module is designed for a Lattice iCE40 UP5K FPGA.\n *          It instantiates the internal high-speed oscillator (OSCH) to generate a\n *          48 MHz clock. A counter then divides this clock to toggle an LED\n *          output at a frequency of 2 Hz (0.25s on, 0.25s off).\n *\n * @param CLK_FREQ The frequency of the internal oscillator in Hz.\n * @param BLINK_FREQ The desired blink frequency of the LED in Hz.\n */\nmodule led_blinker #(\n    parameter CLK_FREQ   = 48_000_000, // 48 MHz clock frequency\n    parameter BLINK_FREQ = 2           // 2 Hz blink frequency\n) (\n    output logic led_o // LED output\n);\n\n    // The division factor needed to get one toggle every half-period.\n    // (CLK_FREQ / BLINK_FREQ) gives the counts for a full cycle (on and off).\n    // We want to toggle at half the cycle period.\n    localparam HALF_PERIOD_COUNTS = CLK_FREQ / (BLINK_FREQ * 2);\n\n    // Calculate the number of bits required for the counter.\n    // $clog2 calculates the ceiling of log base 2, which gives the bit-width.\n    localparam COUNTER_WIDTH = $clog2(HALF_PERIOD_COUNTS);\n\n    // Internal high-frequency clock signal\n    logic hf_clk;\n\n    // Counter to divide the clock frequency\n    logic [COUNTER_WIDTH-1:0] counter;\n\n    // Instantiate the Lattice iCE40 UltraPlus internal high-speed oscillator.\n    // This generates the main clock for our logic without needing an external crystal.\n    OSCH #(\n        .NOM_FREQ(\"48.00\") // Specify nominal frequency in MHz. Other options: \"12.00\", \"24.00\", \"36.00\"\n    ) u_osc (\n        .STDBY(1'b0),      // Oscillator is not in standby\n        .HFOSCEN(1'b1),    // High Frequency Oscillator is enabled\n        .CHIPCLKEN(1'b1),  // Clock enable for the CHIPCLK-pin\n        .HFOSCOUT(hf_clk)  // High Frequency Oscillator output\n    );\n\n    // Synchronous logic for the counter and LED toggle.\n    // This block is sensitive to the rising edge of the high-frequency clock.\n    always_ff @(posedge hf_clk) begin\n        if (counter == HALF_PERIOD_COUNTS - 1) begin\n            counter &lt;= '0;        // Reset the counter\n            led_o   &lt;= ~led_o;    // Toggle the LED state\n        end else begin\n            counter &lt;= counter + 1; // Increment the counter\n        end\n    end\n\n    // Set the initial state of the LED and counter.\n    initial begin\n        led_o   = 1'b0;\n        counter = '0;\n    end\n\nendmodule"
  },
  {
    "objectID": "labs.html#lab-2---multiplexed-7-segment-display",
    "href": "labs.html#lab-2---multiplexed-7-segment-display",
    "title": "E155 Labs",
    "section": "Lab 2 - Multiplexed 7-Segment Display",
    "text": "Lab 2 - Multiplexed 7-Segment Display"
  },
  {
    "objectID": "labs.html#lab-3---keypad-scanner",
    "href": "labs.html#lab-3---keypad-scanner",
    "title": "E155 Labs",
    "section": "Lab 3 - Keypad Scanner",
    "text": "Lab 3 - Keypad Scanner"
  },
  {
    "objectID": "labs.html#lab-4---digital-audio",
    "href": "labs.html#lab-4---digital-audio",
    "title": "E155 Labs",
    "section": "Lab 4 - Digital Audio",
    "text": "Lab 4 - Digital Audio"
  },
  {
    "objectID": "labs.html#lab-5---interrupts",
    "href": "labs.html#lab-5---interrupts",
    "title": "E155 Labs",
    "section": "Lab 5 - Interrupts",
    "text": "Lab 5 - Interrupts"
  },
  {
    "objectID": "labs.html#lab-6---the-internet-of-things-and-serial-peripheral-interface",
    "href": "labs.html#lab-6---the-internet-of-things-and-serial-peripheral-interface",
    "title": "E155 Labs",
    "section": "Lab 6 - The Internet of Things and Serial Peripheral Interface",
    "text": "Lab 6 - The Internet of Things and Serial Peripheral Interface"
  },
  {
    "objectID": "labs.html#lab-7---the-advanced-encryption-standard-aes",
    "href": "labs.html#lab-7---the-advanced-encryption-standard-aes",
    "title": "E155 Labs",
    "section": "Lab 7 - The Advanced Encryption Standard (AES)",
    "text": "Lab 7 - The Advanced Encryption Standard (AES)"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "E155 Resources",
    "section": "",
    "text": "The e155 website."
  }
]